<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tim Engle Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Tim Engle Blog</description>
    <image>
      <title>Tim Engle Blog</title>
      <url>http://localhost:1313/img/card.webp</url>
      <link>http://localhost:1313/img/card.webp</link>
    </image>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Feb 2025 11:04:04 -0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding systemd Targets</title>
      <link>http://localhost:1313/posts/understanding_systemd_targets/</link>
      <pubDate>Sat, 01 Feb 2025 11:04:04 -0800</pubDate>
      <guid>http://localhost:1313/posts/understanding_systemd_targets/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Linux machines need to boot up many processes in a specific order to start the
machine in the graphical interface. This process is managed by &lt;code&gt;systemd&lt;/code&gt;, the
system and service manager for many Linux distributions.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Login screen for the graphical systemd target&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/img/systemd_graphical_login.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-are-systemd-targets&#34;&gt;What are &lt;code&gt;systemd&lt;/code&gt; targets?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;systemd&lt;/code&gt; determine swhich processes to start in which order by following the
directions within in systemd target files. When an Ubuntu machine boots up it
starts executing &lt;code&gt;default.target&lt;/code&gt; systemd target file which is a symbolic link
to a specific target file then executes the instructions within it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating a K3s Cluster Using EC2</title>
      <link>http://localhost:1313/posts/creating-a-k3s-cluster-using-ec2/</link>
      <pubDate>Mon, 13 Jan 2025 08:51:24 -0800</pubDate>
      <guid>http://localhost:1313/posts/creating-a-k3s-cluster-using-ec2/</guid>
      <description>&lt;p&gt;As part of my preparation for the GitHub Actions certification, I’ve been
itching to get some hands-on experience deploying to a Kubernetes cluster.
I have one requirement, I do not need the cluster running all the time.
Leaving it idle would just rack up unnecessary costs. My solution?
A cloud computer I can use as a controlplane node which I can easily spin up
and down as needed.&lt;/p&gt;
&lt;p&gt;After doing some research, I decided to go with k3s. It’s lightweight,
simple to use, and perfectly suited for my needs. For hosting, I chose
AWS EC2 because I’m already familiar with it, and it offers a straightforward
experience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>First Day at Hacker Dojo</title>
      <link>http://localhost:1313/posts/first-day-at-hacker-dojo/</link>
      <pubDate>Thu, 09 Jan 2025 21:08:38 -0800</pubDate>
      <guid>http://localhost:1313/posts/first-day-at-hacker-dojo/</guid>
      <description>&lt;p&gt;While on my journey to land my first full-time job in the tech industry,
I have decided to move back in with my father, who has just retired,
to save some money in case I need to relocate. He has tons of
free time on his hands, which he spends on his hobby of taking care of fish.
He has so many fish tanks that I am now literally &lt;strong&gt;SLEEPING WITH THE FISHES.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Simple Guide to Name Resolution</title>
      <link>http://localhost:1313/posts/a-simple-guide-to-name-resolution/</link>
      <pubDate>Thu, 19 Sep 2024 21:10:21 -0800</pubDate>
      <guid>http://localhost:1313/posts/a-simple-guide-to-name-resolution/</guid>
      <description>&lt;p&gt;Network management requires machines to be able to communicate efficiently, and
one of the simplest ways to achieve this is via domain names. But how does a
machine know where to send traffic for any particular domain name?
Without proper name resolution, communication becomes challenging—at best
requiring humans to memorize IP addresses, and at worst causing a complete
communication failure. By the end of this article, you will know how to
configure name resolution on a Linux machine and ensure seamless
communication across your network.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Continuous Deployment: Automating GCP Deployments with Artifact Registry and Cloud Run</title>
      <link>http://localhost:1313/posts/gcp-continuous-deployment-3/</link>
      <pubDate>Mon, 26 Aug 2024 17:47:11 -0800</pubDate>
      <guid>http://localhost:1313/posts/gcp-continuous-deployment-3/</guid>
      <description>&lt;p&gt;&lt;em&gt;The references to a blog in this post are for my older blog that was built from
scratch using Go. My new blog is built using Hugo and the Papermod.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://timengle.dev/posts/view/Continuous++Deployment%3A+Creating+a+GitHub+Workflow%2C+Build+Script%2C+and+Dockerfile&#34;&gt;previous post&lt;/a&gt;, we created our GitHub Actions workflow, build script, and Dockerfile. In this post, we will focus on setting up GCP and enabling the APIs that allow our workflow to automate each step of the deployment process.&lt;/p&gt;
&lt;p&gt;Here’s what we’ll cover:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Continuous  Deployment: Creating a GitHub Workflow, Build Script, and Dockerfile</title>
      <link>http://localhost:1313/posts/gcp-continuous-deployment-2/</link>
      <pubDate>Thu, 22 Aug 2024 17:44:14 -0800</pubDate>
      <guid>http://localhost:1313/posts/gcp-continuous-deployment-2/</guid>
      <description>&lt;p&gt;&lt;em&gt;The references to a blog in this post are for my older blog that was built from
scratch using Go. My new blog is built using Hugo and the Papermod.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://timengle.dev/posts/dynamic-file-serving-with-embedded-file-system-and-object-storage-in-go-file-serving-with-embedded-file-system-and-object-storage-in-go/&#34;&gt;previous post&lt;/a&gt;, the importance of setting up continuous deployment (CD) was introduced, and a basic GitHub Actions workflow was created to automate code deployments. In this section of the series, we’ll build on that foundation by discussing three essential files needed for fully automating the deployment process. The first is a more advanced GitHub Actions workflow that will handle all the steps required to deploy updated containers to GCP. The second is a build script that will create a binary of the Go application compatible with the operating system running inside the Docker container. Finally, we’ll cover the Dockerfile, which is responsible for building the container image that will be deployed and hosted by Google Cloud Platform.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Continuous Deployment: Getting Started with CD for Containerized Go Apps Using GitHub Actions &amp; GCP</title>
      <link>http://localhost:1313/posts/gcp-continuous-deployment-1/</link>
      <pubDate>Wed, 14 Aug 2024 22:06:02 -0800</pubDate>
      <guid>http://localhost:1313/posts/gcp-continuous-deployment-1/</guid>
      <description>&lt;h2 id=&#34;introduction-to-this-series&#34;&gt;Introduction to This Series&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The references to a blog in this post are for my older blog that was built from
scratch using Go. My new blog is built using Hugo and the Papermod.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post serves as an introduction to this series on creating a CD pipeline
for containerized Go apps using GitHub Actions and GCP.&lt;/p&gt;
&lt;h2 id=&#34;the-goal&#34;&gt;The Goal&lt;/h2&gt;
&lt;p&gt;Currently this blog is ready to host, but still needs some features that
I would like to add in order for it to make it more engaging for user, easier
for my to add posts, simpler to update posts, and add the ability to view
metrics on posts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic File Serving With Embedded File System and Object Storage in Go File Serving With Embedded File System and Object Storage in Go</title>
      <link>http://localhost:1313/posts/dynamic-file-serving-with-embedded-file-system-and-object-storage-in-go-file-serving-with-embedded-file-system-and-object-storage-in-go/</link>
      <pubDate>Wed, 14 Aug 2024 20:36:36 -0800</pubDate>
      <guid>http://localhost:1313/posts/dynamic-file-serving-with-embedded-file-system-and-object-storage-in-go-file-serving-with-embedded-file-system-and-object-storage-in-go/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The references to a blog in this post are for my older blog that was built from
scratch using Go. My new blog is built using Hugo and the Papermod.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In my current project, this blog, I have a folder of static files embedded directly into the server’s binary. While this is nice to have, I am concerned with scaling, so I would also like to keep these static files in an object storage container like an S3 bucket.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
